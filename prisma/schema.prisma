datasource db {
  provider = "postgresql" // Cambia el proveedor según tu base de datos
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String                 @id @default(cuid()) // ID único del usuario
  name                    String? // Nombre del usuario
  email                   String                 @unique // Email único
  emailVerified           DateTime?
  image                   String?
  hashedPassword          String? // Contraseña del usuario
  role                    RoleUser?              @default(USER) // Enum para diferenciar entre EMPLOYER, EMPLOYEE y ADMIN
  createdAt               DateTime               @default(now()) // Fecha de creación
  updatedAt               DateTime               @updatedAt // Fecha de última actualización
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?

  // Relaciones
  applications Application[] // Relación: un usuario puede postularse a muchos empleos
  company      Company?
  accounts     Account[]
  sessions     Session[]

  status UserStatus @default(ACTIVE)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Job {
  id                String            @id @default(cuid()) // ID único del usuario
  title             String // Título del empleo
  description       String // Descripción del empleo
  salary            String? // Salario (opcional)
  location          String // Ubicación del empleo
  requirements      Requirements[]
  applicationStatus ApplicationStatus @default(PENDING) // Enum para representar el estado de la postulación

  createdAt DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // Fecha de última actualización
  type      TypeJob  @default(OTHER)

  isFeatured Boolean @default(false)
  isActive   Boolean @default(true)
  isArchived Boolean @default(false)
  isDeleted  Boolean @default(false)

  // Relaciones

  applications  Application[] // Relación: un empleo puede tener muchas postulaciones
  categoryJob   CategoryJob?  @relation(fields: [categoryJobId], references: [id], onDelete: SetNull)
  categoryJobId String?
  company       Company       @relation(fields: [companyUserId], references: [userId], onDelete: Cascade)
  companyUserId String
  contactInfo   ContactInfo?
}

model Requirements {
  id   String @id @default(cuid())
  name String

  job   Job?    @relation(fields: [jobId], references: [id], onDelete: SetNull)
  jobId String?
}

model ContactInfo {
  id        String  @id @default(cuid())
  email     String?
  phone     String?
  website   String?
  linkedin  String?
  facebook  String?
  instagram String?

  // Relaciones
  job   Job?    @relation(fields: [jobId], references: [id], onDelete: SetNull)
  jobId String?

  @@unique([jobId])
}

model CategoryJob {
  id   String @id @default(cuid())
  name String @unique

  // Relaciones
  jobs Job[]
}

model Application {
  id          String   @id @default(cuid()) // ID único del usuario
  createdAt   DateTime @default(now()) // Fecha de creación
  updatedAt   DateTime @updatedAt // Fecha de última actualización
  dateApplied DateTime // Fecha de postulación

  // Relaciones
  userId String // Relación con el usuario
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Una postulación pertenece a un usuario

  jobId String // Relación con el empleo
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade) // Una postulación pertenece a un empleo

  status ApplicationStatus @default(PENDING) // Enum para representar el estado de la postulación
}

model Company {
  userId        String   @id @unique // Usar el ID del usuario como ID único para la compañía
  name          String // Nombre de la empresa
  description   String // Descripción de la empresa
  location      String // Ubicación de la empresa
  openPositions Int // Número de posiciones disponibles
  logo          String?
  phone         String?
  email         String?  @unique
  bio           String? // Breve descripción de la empresa
  createdAt     DateTime @default(now()) // Fecha de creación
  updatedAt     DateTime @updatedAt // Fecha de última actualización

  // Relaciones
  jobPostings Job[] // Relación: una empresa puede tener muchas ofertas de empleo
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade) // Relación con el usuario
}

enum RoleUser {
  USER // Rol de usuario
  COMPANY // Rol de empresa
  ADMIN // Rol de administrador
}

enum ApplicationStatus {
  PENDING // Postulación pendiente
  REVIEWED // Postulación revisada
  REJECTED // Postulación rechazada
  ACCEPTED // Postulación aceptada
}

enum TypeJob {
  FULL_TIME // Empleo de tiempo completo
  PART_TIME // Empleo de tiempo parcial
  INTERN // Empleo de interno
  CONTRACT // Empleo de contrato
  TEMPORARY // Empleo temporal
  VOLUNTARY // Empleo voluntario
  PERMANENT // Empleo permanente
  OTHER // Otro tipo de empleo
}

enum UserStatus {
  ACTIVE // Usuario activo
  INACTIVE // Usuario inactivo
  DELETED // Usuario eliminado
  BLOCKED // Usuario bloqueado
  SUSPENDED // Usuario suspendido
  BANNED // Usuario baneado
  DEACTIVATED // Usuario desactivado
  DEACTIVATED_PERMANENTLY // Usuario desactivado permanentemente
  DEACTIVATED_TEMPORARILY // Usuario desactivado temporalmente
  DEACTIVATED_BY_ADMIN // Usuario desactivado por el administrador
}
